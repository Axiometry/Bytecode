package me.axiometry.bytecode.asm;

import java.io.*;

import me.axiometry.bytecode.*;

import org.objectweb.asm.*;

public class TestCrashExploit {
	public static void main(String[] args) throws Exception {
		ClassSource source = new SingleClassSource("te", new FileInputStream(new File("CrashExploit.class")));

		byte[] data = source.getClasses().get("te");

		//ClassReader cr = new ClassReader(data);
		//cr.accept(new TraceClassVisitor(null, new ASMifier(), new PrintWriter(System.out)), ClassReader.SKIP_DEBUG);

		ClassReader reader = new ClassReader(data);
		ClassVisitor visitor = createClassVisitor(source, "te");
		reader.accept(visitor, ClassReader.SKIP_DEBUG | ClassReader.SKIP_FRAMES);
	}

	private static ClassVisitor createClassVisitor(final ClassSource source, final String className) {
		return new ClassVisitor(Opcodes.ASM5) {
			@Override
			public void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
				System.out.println("Visiting: " + name + " (" + superName + ")");
				super.visit(version, access, name, signature, superName, interfaces);
			}

			@Override
			public FieldVisitor visitField(int access, String name, String desc, String signature, Object value) {
				System.out.println("  Field: " + desc + " " + name);
				return super.visitField(access, className, desc, signature, value);
				/*return new FieldVisitor(Opcodes.ASM5, super.visitField(access, name, desc, signature, value)) {

				};*/
			}

			@Override
			public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
				System.out.println("  Method: " + name + desc);
				return super.visitMethod(access, name, desc, signature, exceptions);
			}
		};
	}
}
